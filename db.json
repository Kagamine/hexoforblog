{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0}],"Cache":[{"_id":"source/_posts/Join.md","shasum":"cb71367bd1dcefd03780d3b5cfc99852c0b17bff","modified":1456243043537},{"_id":"source/_posts/LINQ优点总结(转载).md","shasum":"a5f6dae9f1d4e041ad586ede4df34e1456f00009","modified":1456243095555},{"_id":"source/_posts/托管堆和垃圾回收(续).md","shasum":"86c3cc55a2064204b0c6fed8560c6c47dbcf3dff","modified":1456241363104},{"_id":"source/_posts/托管堆和垃圾回收.md","shasum":"d12a3ca5fed1b248d1e766164d718adbc195106f","modified":1456241115626},{"_id":"source/_posts/技巧避免修改绑定变量.md","shasum":"f21deb81fb28324cb406923ebb89090062b6d9a9","modified":1456243117842},{"_id":"source/_posts/类字段与类属性.md","shasum":"3f0a393785a81e283e461c8d5ac18caf28a28a54","modified":1456243127116},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1456238296461},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1456238296461},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1456238296477},{"_id":"themes/landscape/_config.yml","shasum":"e1fa116f99b8ab7c23ab75b59932a1a5b9aeb1e3","modified":1456238296477},{"_id":"themes/landscape/languages/default.yml","shasum":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1456236106092},{"_id":"themes/landscape/languages/nl.yml","shasum":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1456236106091},{"_id":"themes/landscape/languages/no.yml","shasum":"965a171e70347215ec726952e63f5b47930931ef","modified":1456236106093},{"_id":"themes/landscape/languages/ru.yml","shasum":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1456236106093},{"_id":"themes/landscape/languages/zh-CN.yml","shasum":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1456236106092},{"_id":"themes/landscape/languages/zh-TW.yml","shasum":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1456236106104},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1456238296477},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1456238296477},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1456238296493},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"01201725258ad2aaee606cd4dfdebc21b646def1","modified":1456238296493},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"4b19c1080c9e6c2acd922a88ed29d183a3b5bc09","modified":1456238296477},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1456238296477},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"da9a4ab32efc44c098f317fe64e2335989929b0e","modified":1456238296493},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1456238296493},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1456238296493},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1456238296493},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1456238296493},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1456238296508},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1456238296493},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1456238296508},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1456238296508},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1456238296508},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1456238296508},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1456238296508},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1456238296508},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1456238296508},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1456238296508},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1456238296508},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1456238296524},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1456238296508},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1456238296540},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1456238296524},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1456238296524},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1456238296524},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1456238296524},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1456238296524},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1456238296524},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1456238296524},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1456238296524},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1456238296524},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1456238296540},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1456238296524},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1456238296524},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1456238296540},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1456238296540},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1456238296540},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1456238296540},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1456238296540},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1456238296540},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1456238296540},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1456238296540},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1456238296555},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1456238296555},{"_id":"themes/landscape/source/css/style.styl","shasum":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1456238296555},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1456238296571},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1456238296571},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1456238296586},{"_id":"themes/landscape/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1456238296571},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1456238296571},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1456238296586},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1456238296586},{"_id":"public/js/script.js","modified":1456243220892,"shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1456243220902,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1456243220908,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1456243220918,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1456243220926,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1456243220932,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1456243220937,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1456243220976,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1456243220979,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1456243220987,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1456243220993,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1456243221002,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1456243221007,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1456243221012,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1456243221025,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1456243221030,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1456243222378,"shasum":"e9ae89d3eaf09b4fb3b48f3da5e58e74ea5875b0"},{"_id":"public/css/images/banner.jpg","modified":1456243222721,"shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1456243222728,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1456243222736,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1456243222746,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1456243222755,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1456243222760,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/2016/02/23/Join/index.html","modified":1456243222878,"shasum":"a7c615efa271c8dd66fc1f56698bc49255b4ef7e"},{"_id":"public/2016/02/23/技巧避免修改绑定变量/index.html","modified":1456243222905,"shasum":"ddbb0cb3d76ec6b30b8b35cd41e546ac4902a225"},{"_id":"public/2016/02/23/类字段与类属性/index.html","modified":1456243222929,"shasum":"7e77d3582e0258ee741319c58ec4eda710c60a6d"},{"_id":"public/2016/02/23/托管堆和垃圾回收(续)/index.html","modified":1456243222950,"shasum":"c1a12114e3e87b30279d9e2729ee168bfa7787f7"},{"_id":"public/2016/02/23/托管堆和垃圾回收/index.html","modified":1456243222976,"shasum":"27ac2884613b26fb5f1da72f6026ff9ad53f1fad"},{"_id":"public/2016/02/23/LINQ优点总结(转载)/index.html","modified":1456243223011,"shasum":"8c4ae353718b73f9aeca29da3d0f192dada0e854"},{"_id":"public/archives/index.html","modified":1456243223040,"shasum":"9dd9d28e601071a3185cd55e62a12126c0afd0ae"},{"_id":"public/archives/2016/index.html","modified":1456243223060,"shasum":"c5224c037a3bedfb365267cad87998910d41bc48"},{"_id":"public/archives/2016/02/index.html","modified":1456243223079,"shasum":"2cdee6776a9fc1bc8de3b976b8c623324ebf6ca7"},{"_id":"public/categories/net/index.html","modified":1456243223097,"shasum":"9a1c7d4afa51b9d4608c2d86776c351ea3ae92fa"},{"_id":"public/categories/GC/index.html","modified":1456243223109,"shasum":"3076c0e05a033930c3e33c9b4765c04a782e78c9"},{"_id":"public/index.html","modified":1456243223137,"shasum":"6e2ed4a5e13901d91082bbe67794d0b40c01030b"}],"Category":[{"name":".net","_id":"cikzlm3ig00013gunq8hljn4o"},{"name":"GC","_id":"cikzlm3jg00083gun7qz0a5r1"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":".NET-join用法","_content":"\n\n#.NET   Join\n 连接：内连接、外连接、左连接、右连接。\nSQL的Join这里就不多说了，\n今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。\n\nJoin用于连接数据，首先就是数据之间有联系咯。\n \n先说Enumerable.Join()。\n参数类型如下：\n\t\t\tpublic static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>\n\t\t\t(      \n\t\t\t         this IEnumerable<TOuter> outer,\n\t\t\t        IEnumerable<TInner> inner,\n\t\t\t        Func<TOuter, TKey> outerKeySelector,\n\t\t\t        Func<TInner, TKey> innerKeySelector,\n\t\t\t        Func<TOuter, TInner, TResult> resultSelector\n\t\t\t) \n类型参数\nTOuter\n第一个序列中的元素的类型。\nTInner\n第二个序列中的元素的类型。\nTKey\n键选择器函数返回的键的类型。\nTResult\n结果元素的类型。\n参数\nouter\n类型：System.Collections.Generic.IEnumerable<TOuter>\n要联接的第一个序列。\ninner\n类型：System.Collections.Generic.IEnumerable<TInner>\n要与第一个序列联接的序列。\nouterKeySelector\n类型：System.Func<TOuter, TKey>\n用于从第一个序列的每个元素提取联接键的函数。\ninnerKeySelector\n类型：System.Func<TInner, TKey>\n用于从第二个序列的每个元素提取联接键的函数。\nresultSelector\n类型：System.Func<TOuter, TInner, TResult>\n用于从两个匹配元素创建结果元素的函数。\n返回值\n类型：System.Collections.Generic.IEnumerable<TResult>\nIEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.\" xml:space=\"preserve\">一个具有 TResult 类型元素的 IEnumerable<T>，这些元素是通过对两个序列执行内部联接得来的。\n使用说明\n在 Visual Basic 和 C# 中，可以在 IEnumerable<TOuter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。\n \n先上一个MSDN的例子。\n       \n         public static void JoinEx1()         \n         {\n\t       Person magnus = new Person { Name = \"Hedlund, Magnus\" };\n\t       Pet barley = new Pet { Name = \"Barley\", Owner = terry };\n\t       Person terry = new Person { Name = \"Adams, Terry\" };\n\t       Person charlotte = new Person { Name = \"Weiss, \n\t       Charlotte\" };\n\t       Pet boots = new Pet { Name = \"Boots\", Owner = terry };\n\t       Pet whiskers = new Pet { Name = \"Whiskers\", \n\t       Owner = charlotte};\n\t       Pet daisy = new Pet { Name = \"Daisy\", Owner = magnus };\n\n        List<Person> people = new List<Person> \n        { magnus, terry, charlotte };\n        List<Pet> pets = new List<Pet> \n        { barley, boots, whiskers, daisy };\n\n        // Create a list of Person-Pet pairs where \n        // each element is an anonymous type that contains a\n        // Pet's name and the name of the Person that owns the Pet.\n        var query =\n            people.Join(\n                        pets,//需要Join的另一个数据源\n              person => person,//自己用来比较的key， lambda 表达式\n         pet => pet.Owner,//另一个数据源用来比较的key， lambda 表达式\n    (person, pet) =>new { OwnerName = person.Name, Pet = pet.Name } \n                   //想要取出来的数据，支持匿名对象， lambda 表达式);\n        foreach (var obj in query)\n        {\n          Console.WriteLine( \"{0} - {1}\",obj.OwnerName,obj.Pet);\n        }\n    }\n\n LINQ的Join\n同样是上面的数据，如果换成LINQ的Join，写法如下：\n            var query = from person in people // 第一个数据源\n                      join pet in pets            //第二个数据源\n                      on person equals pet.Owner  //Join条件\n                      select  new { OwnerName = person.Name, Pet = pet.Name };  \n                      //要到得到的数据。\n\n\n上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接....\n等我下次有心情再更新吧，再不走家里的键盘又要坏了。 \n\n一些资料链接：\nhttps://msdn.microsoft.com/zh-cn/library/bb311040.aspx\nhttps://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396\nhttp://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html\nhttp://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html\nhttp://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html ; \n\n\nLINQ GroupJoin 实现左连接\nvar queryGroup = from person in people // 第一个数据源\n                                join pet in pets //第二个数据源\n                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin\n                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 ","source":"_posts/Join.md","raw":"---\nlayout: post\ntitle: .NET-join用法\ncategory: .net\n---\n\n\n#.NET   Join\n 连接：内连接、外连接、左连接、右连接。\nSQL的Join这里就不多说了，\n今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。\n\nJoin用于连接数据，首先就是数据之间有联系咯。\n \n先说Enumerable.Join()。\n参数类型如下：\n\t\t\tpublic static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>\n\t\t\t(      \n\t\t\t         this IEnumerable<TOuter> outer,\n\t\t\t        IEnumerable<TInner> inner,\n\t\t\t        Func<TOuter, TKey> outerKeySelector,\n\t\t\t        Func<TInner, TKey> innerKeySelector,\n\t\t\t        Func<TOuter, TInner, TResult> resultSelector\n\t\t\t) \n类型参数\nTOuter\n第一个序列中的元素的类型。\nTInner\n第二个序列中的元素的类型。\nTKey\n键选择器函数返回的键的类型。\nTResult\n结果元素的类型。\n参数\nouter\n类型：System.Collections.Generic.IEnumerable<TOuter>\n要联接的第一个序列。\ninner\n类型：System.Collections.Generic.IEnumerable<TInner>\n要与第一个序列联接的序列。\nouterKeySelector\n类型：System.Func<TOuter, TKey>\n用于从第一个序列的每个元素提取联接键的函数。\ninnerKeySelector\n类型：System.Func<TInner, TKey>\n用于从第二个序列的每个元素提取联接键的函数。\nresultSelector\n类型：System.Func<TOuter, TInner, TResult>\n用于从两个匹配元素创建结果元素的函数。\n返回值\n类型：System.Collections.Generic.IEnumerable<TResult>\nIEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.\" xml:space=\"preserve\">一个具有 TResult 类型元素的 IEnumerable<T>，这些元素是通过对两个序列执行内部联接得来的。\n使用说明\n在 Visual Basic 和 C# 中，可以在 IEnumerable<TOuter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。\n \n先上一个MSDN的例子。\n       \n         public static void JoinEx1()         \n         {\n\t       Person magnus = new Person { Name = \"Hedlund, Magnus\" };\n\t       Pet barley = new Pet { Name = \"Barley\", Owner = terry };\n\t       Person terry = new Person { Name = \"Adams, Terry\" };\n\t       Person charlotte = new Person { Name = \"Weiss, \n\t       Charlotte\" };\n\t       Pet boots = new Pet { Name = \"Boots\", Owner = terry };\n\t       Pet whiskers = new Pet { Name = \"Whiskers\", \n\t       Owner = charlotte};\n\t       Pet daisy = new Pet { Name = \"Daisy\", Owner = magnus };\n\n        List<Person> people = new List<Person> \n        { magnus, terry, charlotte };\n        List<Pet> pets = new List<Pet> \n        { barley, boots, whiskers, daisy };\n\n        // Create a list of Person-Pet pairs where \n        // each element is an anonymous type that contains a\n        // Pet's name and the name of the Person that owns the Pet.\n        var query =\n            people.Join(\n                        pets,//需要Join的另一个数据源\n              person => person,//自己用来比较的key， lambda 表达式\n         pet => pet.Owner,//另一个数据源用来比较的key， lambda 表达式\n    (person, pet) =>new { OwnerName = person.Name, Pet = pet.Name } \n                   //想要取出来的数据，支持匿名对象， lambda 表达式);\n        foreach (var obj in query)\n        {\n          Console.WriteLine( \"{0} - {1}\",obj.OwnerName,obj.Pet);\n        }\n    }\n\n LINQ的Join\n同样是上面的数据，如果换成LINQ的Join，写法如下：\n            var query = from person in people // 第一个数据源\n                      join pet in pets            //第二个数据源\n                      on person equals pet.Owner  //Join条件\n                      select  new { OwnerName = person.Name, Pet = pet.Name };  \n                      //要到得到的数据。\n\n\n上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接....\n等我下次有心情再更新吧，再不走家里的键盘又要坏了。 \n\n一些资料链接：\nhttps://msdn.microsoft.com/zh-cn/library/bb311040.aspx\nhttps://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396\nhttp://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html\nhttp://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html\nhttp://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html ; \n\n\nLINQ GroupJoin 实现左连接\nvar queryGroup = from person in people // 第一个数据源\n                                join pet in pets //第二个数据源\n                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin\n                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 ","slug":"Join","published":1,"date":"2016-02-23T15:59:57.398Z","updated":"2016-02-23T15:57:23.537Z","comments":1,"photos":[],"link":"","_id":"cikzlm3i500003gunxv8v0x98"},{"layout":"post","title":".NET 类字段与类属性","_content":"#.NET 类字段与类属性\n@(.NET)[基础|字段|属性]\n\n##字段\n字段表示只读或可读/可写的数据值。\n字段可以是静态的，这种字段被认为是类型状态的一部分。\n字段也可以是实例（非静态），这种字段被认为是对象状态的一部分。 \n强烈建议把字段声明为私有，防止类型或对象的状态被类型外部代码破坏。\n\n##属性\n属性允许用简单的、字段风格的语法设置或查询类型或对象的逻辑状态，同时保证状态不被破坏。\n作用于类型称为静态属性，作用于对象称为实例属性。\n属性可以无参，也可以有多个参数（相当少见，但集合类用的多）。 \n\n\tusing System;\n\t\n\tpublic sealed class SomeType\n\t{                            //  1  \n\t// Nested class  \n\t   private class SomeNestedType { }                //  2  \n\t\n\t   // Constant, read­only, and static read/write field   \n\t   private const Int32 c_SomeConstant = 1;            //  3     \n\t\n\t   private readonly String m_SomeReadOnlyField = \"2\";     //  4    \n\t\n\t   private static Int32 s_SomeReadWriteField = 3;      //  5  \n\t\n\t   // Type constructor  \n\t   static SomeType() { }                                  //  6  \n\t\n\t   // Instance constructors  \n\t   public SomeType(Int32 x) { }                           //  7  \n\t\n\t   public SomeType() { }                                  //  8 \n\t\n\t   // Instance and static methods  \n\t   private String InstanceMethod() { return null; }       // 9   \n\t\n\t   public static void Main() { }                        // 10 \n\t\n\t   // Instance property  \n\t   public Int32 SomeProp\n\t   {                                // 11      \n\t       get { return 0; }                                // 12      \n\t       set { }                                          // 13  \n\t   }\n\t\n\t   // Instance parameterful property (indexer) \n\t   public Int32 this[String s]\n\t   {                          // 14       \n\t       get { return 0; }                                // 15        \n\t       set { }                                          // 16  \n\t   }\n\t\n\t   // Instance event  \n\t   public event EventHandler SomeEvent;                  // 17  \n\t}\n\n![enter image description here](https://kekaeq-ch3301.files.1drv.com/y3meEWWaK-o9SNfr_fT71Xr3YrPqO1LIswWqMvlHyUxWeH8P0PtXsQlfRkDnGshlMJIy2gPsxNet14efOPOuX-dHmZhCTg8PXyELJR9tnayye4LeEQ6F997b8pSI84wBR6nmmOF8IAr92oKWk36-f8alkEj9TrDQbiMoKGQwO5MTFY/20150105.jpg?psid=1)\n\n\n![enter image description here](https://kekaeq-ch3301.files.1drv.com/y3mN8FseIEbAaQfT8ynEIc4nYsOUK0p0IN7Hp39imVSZXNQXlSfAYmvaC-9bDM3Hq6rPCV1XgrgvoST8wXejwARXaDmXptZpb_nyWwUzWK1rzaJ6fSsYfnP0icRKUclaVxnlltOJSQiuTFO7_fCfabmv0AsrgL5sLo6GdVJmpd-L10/QQ%E5%9B%BE%E7%89%8720151003165909.jpg?psid=1)","source":"_posts/类字段与类属性.md","raw":"---\nlayout: post\ntitle: .NET 类字段与类属性\ncategory: .net\n---\n#.NET 类字段与类属性\n@(.NET)[基础|字段|属性]\n\n##字段\n字段表示只读或可读/可写的数据值。\n字段可以是静态的，这种字段被认为是类型状态的一部分。\n字段也可以是实例（非静态），这种字段被认为是对象状态的一部分。 \n强烈建议把字段声明为私有，防止类型或对象的状态被类型外部代码破坏。\n\n##属性\n属性允许用简单的、字段风格的语法设置或查询类型或对象的逻辑状态，同时保证状态不被破坏。\n作用于类型称为静态属性，作用于对象称为实例属性。\n属性可以无参，也可以有多个参数（相当少见，但集合类用的多）。 \n\n\tusing System;\n\t\n\tpublic sealed class SomeType\n\t{                            //  1  \n\t// Nested class  \n\t   private class SomeNestedType { }                //  2  \n\t\n\t   // Constant, read­only, and static read/write field   \n\t   private const Int32 c_SomeConstant = 1;            //  3     \n\t\n\t   private readonly String m_SomeReadOnlyField = \"2\";     //  4    \n\t\n\t   private static Int32 s_SomeReadWriteField = 3;      //  5  \n\t\n\t   // Type constructor  \n\t   static SomeType() { }                                  //  6  \n\t\n\t   // Instance constructors  \n\t   public SomeType(Int32 x) { }                           //  7  \n\t\n\t   public SomeType() { }                                  //  8 \n\t\n\t   // Instance and static methods  \n\t   private String InstanceMethod() { return null; }       // 9   \n\t\n\t   public static void Main() { }                        // 10 \n\t\n\t   // Instance property  \n\t   public Int32 SomeProp\n\t   {                                // 11      \n\t       get { return 0; }                                // 12      \n\t       set { }                                          // 13  \n\t   }\n\t\n\t   // Instance parameterful property (indexer) \n\t   public Int32 this[String s]\n\t   {                          // 14       \n\t       get { return 0; }                                // 15        \n\t       set { }                                          // 16  \n\t   }\n\t\n\t   // Instance event  \n\t   public event EventHandler SomeEvent;                  // 17  \n\t}\n\n![enter image description here](https://kekaeq-ch3301.files.1drv.com/y3meEWWaK-o9SNfr_fT71Xr3YrPqO1LIswWqMvlHyUxWeH8P0PtXsQlfRkDnGshlMJIy2gPsxNet14efOPOuX-dHmZhCTg8PXyELJR9tnayye4LeEQ6F997b8pSI84wBR6nmmOF8IAr92oKWk36-f8alkEj9TrDQbiMoKGQwO5MTFY/20150105.jpg?psid=1)\n\n\n![enter image description here](https://kekaeq-ch3301.files.1drv.com/y3mN8FseIEbAaQfT8ynEIc4nYsOUK0p0IN7Hp39imVSZXNQXlSfAYmvaC-9bDM3Hq6rPCV1XgrgvoST8wXejwARXaDmXptZpb_nyWwUzWK1rzaJ6fSsYfnP0icRKUclaVxnlltOJSQiuTFO7_fCfabmv0AsrgL5sLo6GdVJmpd-L10/QQ%E5%9B%BE%E7%89%8720151003165909.jpg?psid=1)","slug":"类字段与类属性","published":1,"date":"2016-02-23T15:59:48.304Z","updated":"2016-02-23T15:58:47.116Z","comments":1,"photos":[],"link":"","_id":"cikzlm3j200033gunk9hliizh"},{"layout":"post","title":".NET-lmabda避免修改绑定变量","_content":"\n先看一段代码\n\n\t\t#region test1 闭包\n\n        public static void test1()\n        {\n            int index = 0;\n            Func<IEnumerable<int>> sequence =()=>GetEnumrableInt(index);\n\n            index = 20;\n            foreach(int n in sequence())\n                Console.WriteLine(n);\n\n            Console.WriteLine(\"Done\");\n\n            index = 100;\n            foreach (int n in sequence())\n                Console.WriteLine(n);\n        }\n\n\n        public static IEnumerable<int> GetEnumrableInt(int index)\n        {\n            List<int> l = new List<int>();\n            for(int i=index;i<index+30;i++)\n            {\n                l.Add(i);\n            }\n            return l;\n        }\n\n        #endregion\n上面一坨代码演示了在闭包中使用了外部变量，随即又在外部修改了这些变量的情况，得到的结果是输出了20-50的数，然后又输出了100-130之间的数。这种行为有点诡异，但是确实有存在的意义...(书本这样说的，我到觉得很少会用到。)\n\n为了将查询表达式转换成可执行代码，C#编译器做了很多工作。一般而言，C#编译器将查询和lambda表达式转换成 \"静态委托\"、\"实例委托\" 或 \"闭包\"。编译器将根据lambda表达式中的代码选择一种实现方式。选择哪种方式依赖于lambda表达式的主体（body）。这看上去似乎是一些语言上的实现细节，但它却会显著地影响到我们的代码。编译器选择何种实现将可能导致diamante行为发生微妙的变化。\n\n并不是任何的lambda表达式都会生成同样结构的代码。\n\n对于编译器来说，最简单的一种行为是为以下形式的代码生成委托。  \n\n        //我们的lambda表达式\n        public static void test2()\n        {\n            int[] someNum = {0,1,2,3,4,5,6,7,8,9,10 };\n\n            IEnumerable<int> ans = from n in someNum\n                                   select n * n;\n\n            foreach (int i in ans)\n                Console.WriteLine(i);\n\n        }\n\n编译器将使用静态委托来实现n*n的lambda表达式，其为上面代码生成的代码如下：\n\n         //编译器为我们的lambda生成的代码\n        #region 等价于 test2()\n        private static int HiddenFunc(int n)\n        {\n            return n * n;\n        }\n        \n        //静态委托\n        private static Func<int, int> HiddenDelegate;\n\n        public void test2_1()\n        {\n\n            int[] someNum = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\n            if(HiddenDelegate==null)\n            {\n                HiddenDelegate = new Func<int, int>(HiddenFunc);\n            }\n            IEnumerable<int> ans = someNum.Select<int, int>(HiddenDelegate);\n\n          foreach(int i in ans)\n              Console.WriteLine(i);\n\n        }\n        #endregion\n\n这个lambda表达式主体部分并没有访问任何的实例变量或者局部变量。lambda表达式仅仅访问了它的参数。对于这种情况，C#编译器将创建一个静态方法，作为委托的目标。这也是编译器执行的最简单的一种处理方式。若表达式可以通过私有的静态方法实现，那么编译器将生成该私有的静态方法以及相对应的委托定义。对于上面的代码例子中的情况以及仅访问了静态变量的表达式，编译器都会采用这样的方案。\n\n\n接下来介绍另一种较为简单的情况：\nlambda表达式需要访问类型的实例变量，但无需访问外层方法中的局部变量。\n\t\t\t\t\n    public class ModFilter\n    {\n        private readonly int modules;\n\n        public ModFilter(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n\n            return from n in sequence\n                   where n % modules == 0 //新添加的表达式\n                   select n * n;  //和前面的例子是一样的\n        }\n    }\n\n\n\n/* \n\n在这种情况下，编译器将为表达式创建一个实例方法来包装该委托。\n其基本概念和前一种情况一致，只是这里使用了实例方法，以便读取并修改当前对象的状态。\n与静态委托的例子一样，这里编译器将把lambda表达式转换成我们熟悉的代码。其中包含委托的定义以及方法调用。\n如下：\n\n*/\n\n\n\n    public class ModFilter_Other\n    {\n        private readonly int modules;\n\n\n        //实例方法\n        private bool WhereClause(int n)\n        {\n            return ((n%this.modules) ==0);\n        }\n\n\n        private static int SelectClause(int n)\n        {\n            return n * n;\n        }\n\n        private static Func<int, int> SelectDelegate;\n\n\n\n\n        public ModFilter_Other(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n            if(SelectDelegate==null)\n            {\n                SelectDelegate = new Func<int, int>(SelectClause);\n            }\n\n            return sequence.Where<int>(\n                new Func<int, bool>(this.WhereClause)).\n                Select<int, int>(SelectClause);\n        }\n    }\n\n概括来说便是：lambda表达式中的代码访问了对象实例中的成员变量，那么编译器将生成实例方法来表示lambda表达式中的代码。其实这并没有什么奇特之处——编译器省去了我们的一些代码输入工作，代码也变得整洁很多，本质来说这还是普通的方法调用。\n\n\n\n\n\n不过若是lambda表达式中访问到了外部方法中的局部变量或者方法参数，那么编译器将帮你完成很多工作。\n\n\n这里会用到闭包。编译器将生成一个私有的嵌套类型，以便为局部变量实现闭包。\n\n局部变量必须传入到实现了lambda表达式主体部分的委托里。\n\n此外，所有由该lambda表达式执行的对这些局部变量所作的修改都必须能够在外部访问到。\n\n当然，代码中内层和外层中共享的可能不止有一个变量，也可能不止一个的查询表达式。\n\n我们来修改一下该实例方法，让其访问一个局部变量。\n\n\n\t\t  public class ModFilter\n\t\t  {\n\t\t        private readonly int modules;\n\t\t\n\t\t        public ModFilter(int mod)\n\t\t        {\n\t\t            modules = mod;\n\t\t        }\n\t\t\n\t\t\n\t\t        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n\t\t        {\n\t\t            int numValues = 0;\n\t\t\n\t\t            return from n in sequence\n\t\t                   where n % modules == 0 //新添加的表达式\n\t\t                   select n * n / ++ numValues; //访问局部变量\n\t\t        }\n\t      }\n\n注意，select字句需要访问numValues这个局部变量。编译器为了创建这个闭包，需要使用嵌套类型来实现你所需要的行为。下面展示的是编译器为你生成的代码。\n\n\n\n\n \t public class ModFilter\n     {\n        private sealed class Closure\n        {\n            public ModFilter outer;\n\n            public int numValues;\n\n            public int SelectClause(int n)\n            {\n                return ((n * n) / ++this.numValues);\n            }\n        }\n\n\n\n        private readonly int modules;\n\n\n        //实例方法\n        private bool WhereClause(int n)\n        {\n            return ((n % this.modules) == 0);\n        }\n\n        public ModFilter(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n            Closure c = new Closure();\n            c.outer = this;\n            c.numValues = 0;\n\n            return sequence.Where<int>(\n                new Func<int, bool>(this.WhereClause)).\n                Select<int, int>(c.SelectClause);\n        }\n    }\n\n在上面这段代码中，编译器专门创建了一个嵌套类，用来容纳所有将在lambda表达式中访问或修改的变量。实际上，这些局部变量将完全被嵌套类的字段所代替。lambda表达式内部的代码以及表达式外部(但仍在当前方法内)的代码访问的均是同一个字段，lambda表达式中的逻辑也被编译成了内部类的一个方法。\n\n对于lambda表达式中将要用到的外部方法的参数，编译器也会以对待局部变量的方式实现：编译器将这些参数复制到表示该闭包的嵌套类中。\n\n回到最开始的那个示例，这是我们应该可以理解这种看似怪异的行为了。变量index在传入闭包后，但在查询开始执行前曾被外部代码修改。也就是说，你修改了闭包的内部状态，然后还期待其能够回到从前的状态开始执行，显然这是不可能实现的。\n\n考虑到延迟执行中的交互以及编译器实现闭包的方式，修改查询与外部代码之间绑定的变量将可能会引发错误的行为。\n因此，我们应该尽量避免在方法中修改哪些将要传入到闭包中，并将在闭包中使用的变量。\n\n\n\n\n","source":"_posts/技巧避免修改绑定变量.md","raw":"---\nlayout: post\ntitle: .NET-lmabda避免修改绑定变量\ncategory: .net\n---\n\n先看一段代码\n\n\t\t#region test1 闭包\n\n        public static void test1()\n        {\n            int index = 0;\n            Func<IEnumerable<int>> sequence =()=>GetEnumrableInt(index);\n\n            index = 20;\n            foreach(int n in sequence())\n                Console.WriteLine(n);\n\n            Console.WriteLine(\"Done\");\n\n            index = 100;\n            foreach (int n in sequence())\n                Console.WriteLine(n);\n        }\n\n\n        public static IEnumerable<int> GetEnumrableInt(int index)\n        {\n            List<int> l = new List<int>();\n            for(int i=index;i<index+30;i++)\n            {\n                l.Add(i);\n            }\n            return l;\n        }\n\n        #endregion\n上面一坨代码演示了在闭包中使用了外部变量，随即又在外部修改了这些变量的情况，得到的结果是输出了20-50的数，然后又输出了100-130之间的数。这种行为有点诡异，但是确实有存在的意义...(书本这样说的，我到觉得很少会用到。)\n\n为了将查询表达式转换成可执行代码，C#编译器做了很多工作。一般而言，C#编译器将查询和lambda表达式转换成 \"静态委托\"、\"实例委托\" 或 \"闭包\"。编译器将根据lambda表达式中的代码选择一种实现方式。选择哪种方式依赖于lambda表达式的主体（body）。这看上去似乎是一些语言上的实现细节，但它却会显著地影响到我们的代码。编译器选择何种实现将可能导致diamante行为发生微妙的变化。\n\n并不是任何的lambda表达式都会生成同样结构的代码。\n\n对于编译器来说，最简单的一种行为是为以下形式的代码生成委托。  \n\n        //我们的lambda表达式\n        public static void test2()\n        {\n            int[] someNum = {0,1,2,3,4,5,6,7,8,9,10 };\n\n            IEnumerable<int> ans = from n in someNum\n                                   select n * n;\n\n            foreach (int i in ans)\n                Console.WriteLine(i);\n\n        }\n\n编译器将使用静态委托来实现n*n的lambda表达式，其为上面代码生成的代码如下：\n\n         //编译器为我们的lambda生成的代码\n        #region 等价于 test2()\n        private static int HiddenFunc(int n)\n        {\n            return n * n;\n        }\n        \n        //静态委托\n        private static Func<int, int> HiddenDelegate;\n\n        public void test2_1()\n        {\n\n            int[] someNum = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\n            if(HiddenDelegate==null)\n            {\n                HiddenDelegate = new Func<int, int>(HiddenFunc);\n            }\n            IEnumerable<int> ans = someNum.Select<int, int>(HiddenDelegate);\n\n          foreach(int i in ans)\n              Console.WriteLine(i);\n\n        }\n        #endregion\n\n这个lambda表达式主体部分并没有访问任何的实例变量或者局部变量。lambda表达式仅仅访问了它的参数。对于这种情况，C#编译器将创建一个静态方法，作为委托的目标。这也是编译器执行的最简单的一种处理方式。若表达式可以通过私有的静态方法实现，那么编译器将生成该私有的静态方法以及相对应的委托定义。对于上面的代码例子中的情况以及仅访问了静态变量的表达式，编译器都会采用这样的方案。\n\n\n接下来介绍另一种较为简单的情况：\nlambda表达式需要访问类型的实例变量，但无需访问外层方法中的局部变量。\n\t\t\t\t\n    public class ModFilter\n    {\n        private readonly int modules;\n\n        public ModFilter(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n\n            return from n in sequence\n                   where n % modules == 0 //新添加的表达式\n                   select n * n;  //和前面的例子是一样的\n        }\n    }\n\n\n\n/* \n\n在这种情况下，编译器将为表达式创建一个实例方法来包装该委托。\n其基本概念和前一种情况一致，只是这里使用了实例方法，以便读取并修改当前对象的状态。\n与静态委托的例子一样，这里编译器将把lambda表达式转换成我们熟悉的代码。其中包含委托的定义以及方法调用。\n如下：\n\n*/\n\n\n\n    public class ModFilter_Other\n    {\n        private readonly int modules;\n\n\n        //实例方法\n        private bool WhereClause(int n)\n        {\n            return ((n%this.modules) ==0);\n        }\n\n\n        private static int SelectClause(int n)\n        {\n            return n * n;\n        }\n\n        private static Func<int, int> SelectDelegate;\n\n\n\n\n        public ModFilter_Other(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n            if(SelectDelegate==null)\n            {\n                SelectDelegate = new Func<int, int>(SelectClause);\n            }\n\n            return sequence.Where<int>(\n                new Func<int, bool>(this.WhereClause)).\n                Select<int, int>(SelectClause);\n        }\n    }\n\n概括来说便是：lambda表达式中的代码访问了对象实例中的成员变量，那么编译器将生成实例方法来表示lambda表达式中的代码。其实这并没有什么奇特之处——编译器省去了我们的一些代码输入工作，代码也变得整洁很多，本质来说这还是普通的方法调用。\n\n\n\n\n\n不过若是lambda表达式中访问到了外部方法中的局部变量或者方法参数，那么编译器将帮你完成很多工作。\n\n\n这里会用到闭包。编译器将生成一个私有的嵌套类型，以便为局部变量实现闭包。\n\n局部变量必须传入到实现了lambda表达式主体部分的委托里。\n\n此外，所有由该lambda表达式执行的对这些局部变量所作的修改都必须能够在外部访问到。\n\n当然，代码中内层和外层中共享的可能不止有一个变量，也可能不止一个的查询表达式。\n\n我们来修改一下该实例方法，让其访问一个局部变量。\n\n\n\t\t  public class ModFilter\n\t\t  {\n\t\t        private readonly int modules;\n\t\t\n\t\t        public ModFilter(int mod)\n\t\t        {\n\t\t            modules = mod;\n\t\t        }\n\t\t\n\t\t\n\t\t        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n\t\t        {\n\t\t            int numValues = 0;\n\t\t\n\t\t            return from n in sequence\n\t\t                   where n % modules == 0 //新添加的表达式\n\t\t                   select n * n / ++ numValues; //访问局部变量\n\t\t        }\n\t      }\n\n注意，select字句需要访问numValues这个局部变量。编译器为了创建这个闭包，需要使用嵌套类型来实现你所需要的行为。下面展示的是编译器为你生成的代码。\n\n\n\n\n \t public class ModFilter\n     {\n        private sealed class Closure\n        {\n            public ModFilter outer;\n\n            public int numValues;\n\n            public int SelectClause(int n)\n            {\n                return ((n * n) / ++this.numValues);\n            }\n        }\n\n\n\n        private readonly int modules;\n\n\n        //实例方法\n        private bool WhereClause(int n)\n        {\n            return ((n % this.modules) == 0);\n        }\n\n        public ModFilter(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n            Closure c = new Closure();\n            c.outer = this;\n            c.numValues = 0;\n\n            return sequence.Where<int>(\n                new Func<int, bool>(this.WhereClause)).\n                Select<int, int>(c.SelectClause);\n        }\n    }\n\n在上面这段代码中，编译器专门创建了一个嵌套类，用来容纳所有将在lambda表达式中访问或修改的变量。实际上，这些局部变量将完全被嵌套类的字段所代替。lambda表达式内部的代码以及表达式外部(但仍在当前方法内)的代码访问的均是同一个字段，lambda表达式中的逻辑也被编译成了内部类的一个方法。\n\n对于lambda表达式中将要用到的外部方法的参数，编译器也会以对待局部变量的方式实现：编译器将这些参数复制到表示该闭包的嵌套类中。\n\n回到最开始的那个示例，这是我们应该可以理解这种看似怪异的行为了。变量index在传入闭包后，但在查询开始执行前曾被外部代码修改。也就是说，你修改了闭包的内部状态，然后还期待其能够回到从前的状态开始执行，显然这是不可能实现的。\n\n考虑到延迟执行中的交互以及编译器实现闭包的方式，修改查询与外部代码之间绑定的变量将可能会引发错误的行为。\n因此，我们应该尽量避免在方法中修改哪些将要传入到闭包中，并将在闭包中使用的变量。\n\n\n\n\n","slug":"技巧避免修改绑定变量","published":1,"date":"2016-02-23T15:59:52.750Z","updated":"2016-02-23T15:58:37.842Z","comments":1,"photos":[],"link":"","_id":"cikzlm3ja00053gun7i8dj629"},{"layout":"post","title":"C#.NET托管堆和垃圾回收","_content":"\n###托管堆基础\n 简述：每个程序都要使用这样或那样的资源，包括文件、内存缓冲区、屏幕空间、网络连接.....事实上，在面向对象的环境中，每个类型都代表可供程序使用的一种资源。要使用这些资源，必须为代表资源的类型分配内存。\n \n 以下是访问一个资源所需步骤：\n\n1. 调用IL指令newobj，为代表资源的类型分配内存。(C# new操作符)\n2. 初始化内存，设置资源的初始状态。（一般指构造函数）\n3. 访问类型的成员来使用资源。（使用成员变量、方法、属性等）\n4. 摧毁资源的状态以进行清除。（Dispose？？？）\n5. 释放内存。（GC） \n\n\n###从托管堆分配资源\n\nCLR要求所有的对象都从托管堆分配。\n进程初始化，CLR划出一个地址空间区域作为托管堆。CLR还要维护一个指针，姑且叫NextObjPtr，该指针指向下一个对象在堆中的分配位置。刚开始的时候， NextObjPtr 设为地址空间区域的基地址。\n一个区域被非垃圾对象填满后，CLR会分配更多的区域。\n\n\n这一个过程一直重复，直至整个进程地址空间被填满。所以，应用程序内存收进程的虚拟地址空间的限制。\n\n\n32位进程最多能分配1.5GB，64位进程最多能分配8T。\n注：进程内存大小的相关资料\n\n[Memory Support and Windows Operating Systems](https://msdn.microsoft.com/zh-cn/library/windows/hardware/Dn613959(v=vs.85).aspx)\n\n[进程地址空间](https://msdn.microsoft.com/zh-cn/library/ms189334.aspx)\n\n[ 32位模式下C/C++程序可用最大内存](http://blog.csdn.net/yusiguyuan/article/details/12405799)\n\n\n\n \n###C# 的new操作符导致CLR执行以下操作：\n \n \n1、计算类型的字段（以及从基类型继承的字段）所需要的字节数。\n\n\n2、加上对象的开销所需的字节数。每个对象都有两个开销字段：类型对象指针和同步块索引。对于32位应用程序，这两个字段各需要32位，所以每个对象需要增加8字节。对于64位应用程序，这两个字段各需要64位，所以每个对象要增加16字节。\n\n\n3、CLR检查区域中是否有分配对象所需的字节数。如果托管堆有足够的可用空间，就在NetxObjPtr指针指向的地址处放入对象，为对象分配的字节会被清零。接着调用类型的构造器（为this参数传递NextObjPtr），new操作符返回对象引用。就在返回这个对象引用之前，NextObjPtr指针的值会加上这个对象占用的字节数来得到一个新值，即下个对象放入托管堆时的地址。如下图：\n\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/i3rlSCPAcnT9pL0El0BptPIBpuvnxHpBw9Nkp*UqIjw!/o/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=LwKNAC8CjQADACU!&su=1199793361&sce=0-12-12&rf=2-9)\n\n\n\n\n\n###垃圾回收算法\n####CLR使用引用跟踪算法。\n引用跟踪算法只关心引用类型的变量，因为只有这种变量才能引用堆上面的对象；\n值类型变量直接包含值类型实例。引用类型变量可在许多场合使用，包括类的静态和实例字段，或者方法的参数和局部变量。这里我们将所有引用类型的变量都称为根。\nCLR开始GC时，首先暂停所有的线程。(这样可以防止线程在CLR检查期间访问对象并更改其状态。) 然后CLR进入GC标记阶段。在这个阶段，CLR遍历堆中的所有对象，将同步块索引字段中的一位设为0。这表明所有的对象都应删除。然后，CLR检查所有的活动根，查看他们引用了哪些对象。这正是CLR的GC被称作引用跟踪GC的原因。如果一个根包含null，CLR忽略这个根并继续检查下一个根。\n下图展示一个堆，其中包含几个对象。\n![图片1](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/eVBVeXGrNAfoWfyRgl4aC2RRSGgiDpmbrocv4lTSJMA!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=gAIFAYACBQEDACU!&su=1176931729&sce=0-12-12&rf=2-9)\n \n \n \n应用程序的根直接引用对象A 、C、D 、F。所有的对象都已经被标记。标记对象D时，GC发现这个对象含有一个引用对象H的字段，造成对象H也被标记。标记过程会持续，直至应用程序的所有根所有检查完毕。\n检查完毕后，堆中的对象要么已标记，要么未标记。已标记的对象不能被垃圾回收，因为至少有一个根在引用它。我们说这种对象是可达的，因为应用程序可以通过引用它的变量抵达它。 未标记的对象是不可达的，因为应用程序中不存在使对象能被再次访问的根。\n\n\n\n\nCLR知道哪些对象可以幸存，哪些可以被删除后，进入GC的压缩（类似于碎片整理）阶段。在压缩阶段，CLR对堆中已标记的对象进行“乾坤大挪移”，整理所有幸存下来的对象，使他们占用连续的内存。\n\n\n这样做的好处在于：\n\n\n1、所有幸存对象在内存中紧挨在一起，恢复了引用的“局部性”，减少了应用程序的工作集，从而提升了将来访问这些对象时的性能；\n\n\n2、经过整理后，可用空间也是连续的，整个地址空间区段得到了解放，允许其他东西进驻。\n\n\n\n在内存中移动了对象之后有一个问题亟待解决。引用幸存对象的根现在引用的还是对象最初在内存中的位置，而非移动后的位置。被暂停的线程恢复执行时，将访问旧的内存位置，会造成内存损坏。 这显然是不能容忍的，所以作为压缩阶段的一部分，CLR还要从每个根减去所引用对象在内存中偏移的字节数。这样就能保证每个根还是引用和之前一样的对象，只是对象在内存中变换了位置。\n如图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/FyP2yk1O6kMsq3.u4e4x3qrAxpwbajgSHOd4QHTJOhE!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=TQI*AU0CPwEDACU!&su=1202148209&sce=0-12-12&rf=2-9)\n\n\n\n\n\n\n\n\n##代：提升性能 (待续)\nCLR的GC是基于代的垃圾回收器，它对你的代码做出了以下几点假设：\n\n\n1、对象越新，生存周期越短。\n\n\n2、对象越老，生存周期越长。\n\n\n3、回收堆的一部分 ，速度快于回收整个堆。\n\n\n大量研究表明，这些假设对于现今大多数的应用程序都是成立的，它们影响了垃圾回收器的实现方式。这里将解释代的工作原理。\n\n托管堆在初始化时不包括对象。添加到堆的对象成为第0代对象。简单来说，第0代对象就是那些新构造的对象，垃圾回收器从未检查过它们。如下图，新启动的应用程序，分配了5个对象（从A到E）。过了一会，C和E变得不可达了。\n\n\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/77WJus7lssJpEJ2RZREQoNx.5CL31HLdboJbAgCqS0E!/o/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=tQIVAbUCFQEDACU!&su=172682065&sce=0-12-12&rf=2-9)\n\nCLR初始化第0代对象选择一个预算容量。如果分配一个新对象造成第0代超预算，就必须启动一次GC。假设对象A到E刚好用完了第0代的空间，那么分配对象F就必须启动GC。GC之后存活的对象现场成为第1代对象。如下图：\n\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/GEDzaV4pNFNQUuDwl2EQrv*eD9Sk9OJCzx5SpRRI2fk!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=OAL5ADgC.QADACU!&su=1155276897&sce=0-12-12&rf=2-9)\n一次GC之后，第0代就不包含任何对象。和前面一样，新对象会分配到第0代。新分配对象F到对象K都到了第0代。\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Op0QokzBTNYCFR6zzm2tpc2V7U70IsIJTeWrd0UAUb0!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=yAJeAcgCXgEDACU!&su=1124261217&sce=0-12-12&rf=2-9)\n\n之后，程序继续运行，B、H、J变得不可达，它们的内存将在某一个时刻回收。\n\n假设现在新分配对象L会造成第0代超出预算,造成必须启动垃圾回收。\n\n\n开始垃圾回收时,垃圾回收器必须决定检查哪些代。前面说过,CLR初始化时会为第0代对象选择预算.事实上,它还必须为第1代选择预算.\n\n\n开始一次垃圾回收时,垃圾回收器还会检查第一代占用了多少内存。在本例中,由于第1代占用内存远少于预算,所以垃圾回收器只检查第0代对象。回顾之前基于代的垃圾回收器做出的第一个假设：对象越新，生存期越短。 因此，第0代包含更多的垃圾的可能性更大，能回收更多的内存。由于忽略第1代中的对象，所以加快了垃圾回收速度。\n\n\n\n\n显然，忽略第1代中的对象能提升垃圾回收器的性能。但对性能有更大提振作用的是现在不必遍历托管堆中的每个对象。如果根或对象引用了老一代的某个对象，垃圾回收器就可以忽略老对象内部的所有引用，能在更短的时间内构造好可达对象图。当然，如果老对象的字段也可能引用新对象。为了确保对老对象的已更新字段进行检查，垃圾回收器利用了JIT编译器内部的一个机制。这个机制在对象的引用字段发生变化时，会设置一个对应的标志位。这样，垃圾回收器就知道自上一次垃圾回收以来，哪些老对象（如果有的话）已被写入。只有字段发生变化的老对象才需要检查是否引用了第0代中的任何新对象。\n\n\n\n基于代的垃圾回收器还假设越老的对象活得越长。也就是说，第1代对象在应用程序中有可能是继续可达的。如果垃圾回收器检查第1代的对象，很有可能找不到多少垃圾，结果是也回收不了多少内存。因此，对第1代进行垃圾回收很可能是浪费时间的。如果第一代真有垃圾，垃圾将留在那里。如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Do.yRCBJEnaOfZaUOdxj4II9*pX2BEcX2QmIG6NQPBE!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=qAI5AagCOQEDACU!&su=187009937&sce=0-12-12&rf=2-9)\n\n程序继续运行，继续往第0代分配对象，同时程序停止对第1代某对象的使用。\n\n\n如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/YEqIM16xFsSgXdvEzgrerLnKw7fEItnrSqEzlaYnUfE!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=egJPAXoCTwEDACU!&su=1118118497&sce=0-12-12&rf=2-9)\n分配对象P导致第0代超预算，开始GC。第1代的所有对象占据内存仍小于预算，垃圾回收器再次决定只回收第0代。忽略第1代中的垃圾对象。如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/EcdSNU5AatqRERWtVdlJ7LiIPHHXe8.mklN.0hHDK9U!/o/dJQAAAAAAAAA&ek=1&kp=1&pt=0&bo=aAIxAWgCMQEDACU!&su=1214124305&sce=0-12-12&rf=2-9)\n\n\n程序继续运行，假设第一代的增长导致它的全部对象占用了全部预算。这时候应用程序分配对象P到对象S，使第0代对象达到它的预算总和。如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/6dB68RIUYrqMZ4p0VIY3REJZPg.g3ybkZFIazJ3h.CQ!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=jwIiAY8CIgEDACU!&su=177976657&sce=0-12-12&rf=2-9)\n\n\n这时候，应用程序准备分配对象T，由于第一代已满，所以必须开始GC。但这一次垃圾回收器发现第一代占用了太多内存，以至于用完了预算。由于前几次对第0代进行GC时，第1代中可能已经有很多对象变得不可达。所以这次垃圾回收器决定检查第1代和第0代中的所有对象。两代都被垃圾回收后，堆的情况如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/bxdZDsZi2Y6FSDWs7RXNPkkJK8dCzMD.cfnjwNY2Mjs!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=tgI2AbYCNgEDACU!&su=197762641&sce=0-12-12&rf=2-9)\n\n\n\n托管堆只支持三代：第0代、第1代和第2代。\n\n\nCLR初始化时，会为每一代选择预算。\n\n\n然而，CLR的垃圾回收是自调节的。\n\n\n这意味着垃圾回收器会在执行垃圾回收的过程了解程序的行为。\n\n\n例如：假设应用程序构造了许多对象，但每个对象的时间都很短。\n在这种情况下，对第0代的垃圾回收会回收到大量的内存。事实上，第0代的所有对象都可能被回收。\n\n\n\n如果垃圾回收器发现在回收第0代后存活下来的对象很少，就可能减少第0代的预算。已分配空间的减少意味着垃圾回收将更频繁地发生，但垃圾回收器每次做的事情也减少，这减少了进程的工作集。\n\n\n\n另一方面，如果垃圾回收器回收了第0代，发现还有很多对象存活，没多少内存可以被回收，就会增大第0代的预算。\n\n同样的启发性算法调整预算适用于了第1代和第2代的预算。\n\n引自：《CLR VIA C# -21章》\n\n\n[自动内存管理](https://msdn.microsoft.com/zh-cn/library/vstudio/f144e03t(v=vs.100).aspx)\n\n\n[垃圾回收的基础](https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100).aspx)\n\n\n[代数](https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100).aspx#generations )","source":"_posts/托管堆和垃圾回收.md","raw":"---\nlayout: post\ntitle: C#.NET托管堆和垃圾回收\ncategory: GC\n---\n\n###托管堆基础\n 简述：每个程序都要使用这样或那样的资源，包括文件、内存缓冲区、屏幕空间、网络连接.....事实上，在面向对象的环境中，每个类型都代表可供程序使用的一种资源。要使用这些资源，必须为代表资源的类型分配内存。\n \n 以下是访问一个资源所需步骤：\n\n1. 调用IL指令newobj，为代表资源的类型分配内存。(C# new操作符)\n2. 初始化内存，设置资源的初始状态。（一般指构造函数）\n3. 访问类型的成员来使用资源。（使用成员变量、方法、属性等）\n4. 摧毁资源的状态以进行清除。（Dispose？？？）\n5. 释放内存。（GC） \n\n\n###从托管堆分配资源\n\nCLR要求所有的对象都从托管堆分配。\n进程初始化，CLR划出一个地址空间区域作为托管堆。CLR还要维护一个指针，姑且叫NextObjPtr，该指针指向下一个对象在堆中的分配位置。刚开始的时候， NextObjPtr 设为地址空间区域的基地址。\n一个区域被非垃圾对象填满后，CLR会分配更多的区域。\n\n\n这一个过程一直重复，直至整个进程地址空间被填满。所以，应用程序内存收进程的虚拟地址空间的限制。\n\n\n32位进程最多能分配1.5GB，64位进程最多能分配8T。\n注：进程内存大小的相关资料\n\n[Memory Support and Windows Operating Systems](https://msdn.microsoft.com/zh-cn/library/windows/hardware/Dn613959(v=vs.85).aspx)\n\n[进程地址空间](https://msdn.microsoft.com/zh-cn/library/ms189334.aspx)\n\n[ 32位模式下C/C++程序可用最大内存](http://blog.csdn.net/yusiguyuan/article/details/12405799)\n\n\n\n \n###C# 的new操作符导致CLR执行以下操作：\n \n \n1、计算类型的字段（以及从基类型继承的字段）所需要的字节数。\n\n\n2、加上对象的开销所需的字节数。每个对象都有两个开销字段：类型对象指针和同步块索引。对于32位应用程序，这两个字段各需要32位，所以每个对象需要增加8字节。对于64位应用程序，这两个字段各需要64位，所以每个对象要增加16字节。\n\n\n3、CLR检查区域中是否有分配对象所需的字节数。如果托管堆有足够的可用空间，就在NetxObjPtr指针指向的地址处放入对象，为对象分配的字节会被清零。接着调用类型的构造器（为this参数传递NextObjPtr），new操作符返回对象引用。就在返回这个对象引用之前，NextObjPtr指针的值会加上这个对象占用的字节数来得到一个新值，即下个对象放入托管堆时的地址。如下图：\n\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/i3rlSCPAcnT9pL0El0BptPIBpuvnxHpBw9Nkp*UqIjw!/o/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=LwKNAC8CjQADACU!&su=1199793361&sce=0-12-12&rf=2-9)\n\n\n\n\n\n###垃圾回收算法\n####CLR使用引用跟踪算法。\n引用跟踪算法只关心引用类型的变量，因为只有这种变量才能引用堆上面的对象；\n值类型变量直接包含值类型实例。引用类型变量可在许多场合使用，包括类的静态和实例字段，或者方法的参数和局部变量。这里我们将所有引用类型的变量都称为根。\nCLR开始GC时，首先暂停所有的线程。(这样可以防止线程在CLR检查期间访问对象并更改其状态。) 然后CLR进入GC标记阶段。在这个阶段，CLR遍历堆中的所有对象，将同步块索引字段中的一位设为0。这表明所有的对象都应删除。然后，CLR检查所有的活动根，查看他们引用了哪些对象。这正是CLR的GC被称作引用跟踪GC的原因。如果一个根包含null，CLR忽略这个根并继续检查下一个根。\n下图展示一个堆，其中包含几个对象。\n![图片1](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/eVBVeXGrNAfoWfyRgl4aC2RRSGgiDpmbrocv4lTSJMA!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=gAIFAYACBQEDACU!&su=1176931729&sce=0-12-12&rf=2-9)\n \n \n \n应用程序的根直接引用对象A 、C、D 、F。所有的对象都已经被标记。标记对象D时，GC发现这个对象含有一个引用对象H的字段，造成对象H也被标记。标记过程会持续，直至应用程序的所有根所有检查完毕。\n检查完毕后，堆中的对象要么已标记，要么未标记。已标记的对象不能被垃圾回收，因为至少有一个根在引用它。我们说这种对象是可达的，因为应用程序可以通过引用它的变量抵达它。 未标记的对象是不可达的，因为应用程序中不存在使对象能被再次访问的根。\n\n\n\n\nCLR知道哪些对象可以幸存，哪些可以被删除后，进入GC的压缩（类似于碎片整理）阶段。在压缩阶段，CLR对堆中已标记的对象进行“乾坤大挪移”，整理所有幸存下来的对象，使他们占用连续的内存。\n\n\n这样做的好处在于：\n\n\n1、所有幸存对象在内存中紧挨在一起，恢复了引用的“局部性”，减少了应用程序的工作集，从而提升了将来访问这些对象时的性能；\n\n\n2、经过整理后，可用空间也是连续的，整个地址空间区段得到了解放，允许其他东西进驻。\n\n\n\n在内存中移动了对象之后有一个问题亟待解决。引用幸存对象的根现在引用的还是对象最初在内存中的位置，而非移动后的位置。被暂停的线程恢复执行时，将访问旧的内存位置，会造成内存损坏。 这显然是不能容忍的，所以作为压缩阶段的一部分，CLR还要从每个根减去所引用对象在内存中偏移的字节数。这样就能保证每个根还是引用和之前一样的对象，只是对象在内存中变换了位置。\n如图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/FyP2yk1O6kMsq3.u4e4x3qrAxpwbajgSHOd4QHTJOhE!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=TQI*AU0CPwEDACU!&su=1202148209&sce=0-12-12&rf=2-9)\n\n\n\n\n\n\n\n\n##代：提升性能 (待续)\nCLR的GC是基于代的垃圾回收器，它对你的代码做出了以下几点假设：\n\n\n1、对象越新，生存周期越短。\n\n\n2、对象越老，生存周期越长。\n\n\n3、回收堆的一部分 ，速度快于回收整个堆。\n\n\n大量研究表明，这些假设对于现今大多数的应用程序都是成立的，它们影响了垃圾回收器的实现方式。这里将解释代的工作原理。\n\n托管堆在初始化时不包括对象。添加到堆的对象成为第0代对象。简单来说，第0代对象就是那些新构造的对象，垃圾回收器从未检查过它们。如下图，新启动的应用程序，分配了5个对象（从A到E）。过了一会，C和E变得不可达了。\n\n\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/77WJus7lssJpEJ2RZREQoNx.5CL31HLdboJbAgCqS0E!/o/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=tQIVAbUCFQEDACU!&su=172682065&sce=0-12-12&rf=2-9)\n\nCLR初始化第0代对象选择一个预算容量。如果分配一个新对象造成第0代超预算，就必须启动一次GC。假设对象A到E刚好用完了第0代的空间，那么分配对象F就必须启动GC。GC之后存活的对象现场成为第1代对象。如下图：\n\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/GEDzaV4pNFNQUuDwl2EQrv*eD9Sk9OJCzx5SpRRI2fk!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=OAL5ADgC.QADACU!&su=1155276897&sce=0-12-12&rf=2-9)\n一次GC之后，第0代就不包含任何对象。和前面一样，新对象会分配到第0代。新分配对象F到对象K都到了第0代。\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Op0QokzBTNYCFR6zzm2tpc2V7U70IsIJTeWrd0UAUb0!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=yAJeAcgCXgEDACU!&su=1124261217&sce=0-12-12&rf=2-9)\n\n之后，程序继续运行，B、H、J变得不可达，它们的内存将在某一个时刻回收。\n\n假设现在新分配对象L会造成第0代超出预算,造成必须启动垃圾回收。\n\n\n开始垃圾回收时,垃圾回收器必须决定检查哪些代。前面说过,CLR初始化时会为第0代对象选择预算.事实上,它还必须为第1代选择预算.\n\n\n开始一次垃圾回收时,垃圾回收器还会检查第一代占用了多少内存。在本例中,由于第1代占用内存远少于预算,所以垃圾回收器只检查第0代对象。回顾之前基于代的垃圾回收器做出的第一个假设：对象越新，生存期越短。 因此，第0代包含更多的垃圾的可能性更大，能回收更多的内存。由于忽略第1代中的对象，所以加快了垃圾回收速度。\n\n\n\n\n显然，忽略第1代中的对象能提升垃圾回收器的性能。但对性能有更大提振作用的是现在不必遍历托管堆中的每个对象。如果根或对象引用了老一代的某个对象，垃圾回收器就可以忽略老对象内部的所有引用，能在更短的时间内构造好可达对象图。当然，如果老对象的字段也可能引用新对象。为了确保对老对象的已更新字段进行检查，垃圾回收器利用了JIT编译器内部的一个机制。这个机制在对象的引用字段发生变化时，会设置一个对应的标志位。这样，垃圾回收器就知道自上一次垃圾回收以来，哪些老对象（如果有的话）已被写入。只有字段发生变化的老对象才需要检查是否引用了第0代中的任何新对象。\n\n\n\n基于代的垃圾回收器还假设越老的对象活得越长。也就是说，第1代对象在应用程序中有可能是继续可达的。如果垃圾回收器检查第1代的对象，很有可能找不到多少垃圾，结果是也回收不了多少内存。因此，对第1代进行垃圾回收很可能是浪费时间的。如果第一代真有垃圾，垃圾将留在那里。如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Do.yRCBJEnaOfZaUOdxj4II9*pX2BEcX2QmIG6NQPBE!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=qAI5AagCOQEDACU!&su=187009937&sce=0-12-12&rf=2-9)\n\n程序继续运行，继续往第0代分配对象，同时程序停止对第1代某对象的使用。\n\n\n如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/YEqIM16xFsSgXdvEzgrerLnKw7fEItnrSqEzlaYnUfE!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=egJPAXoCTwEDACU!&su=1118118497&sce=0-12-12&rf=2-9)\n分配对象P导致第0代超预算，开始GC。第1代的所有对象占据内存仍小于预算，垃圾回收器再次决定只回收第0代。忽略第1代中的垃圾对象。如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/EcdSNU5AatqRERWtVdlJ7LiIPHHXe8.mklN.0hHDK9U!/o/dJQAAAAAAAAA&ek=1&kp=1&pt=0&bo=aAIxAWgCMQEDACU!&su=1214124305&sce=0-12-12&rf=2-9)\n\n\n程序继续运行，假设第一代的增长导致它的全部对象占用了全部预算。这时候应用程序分配对象P到对象S，使第0代对象达到它的预算总和。如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/6dB68RIUYrqMZ4p0VIY3REJZPg.g3ybkZFIazJ3h.CQ!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=jwIiAY8CIgEDACU!&su=177976657&sce=0-12-12&rf=2-9)\n\n\n这时候，应用程序准备分配对象T，由于第一代已满，所以必须开始GC。但这一次垃圾回收器发现第一代占用了太多内存，以至于用完了预算。由于前几次对第0代进行GC时，第1代中可能已经有很多对象变得不可达。所以这次垃圾回收器决定检查第1代和第0代中的所有对象。两代都被垃圾回收后，堆的情况如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/bxdZDsZi2Y6FSDWs7RXNPkkJK8dCzMD.cfnjwNY2Mjs!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=tgI2AbYCNgEDACU!&su=197762641&sce=0-12-12&rf=2-9)\n\n\n\n托管堆只支持三代：第0代、第1代和第2代。\n\n\nCLR初始化时，会为每一代选择预算。\n\n\n然而，CLR的垃圾回收是自调节的。\n\n\n这意味着垃圾回收器会在执行垃圾回收的过程了解程序的行为。\n\n\n例如：假设应用程序构造了许多对象，但每个对象的时间都很短。\n在这种情况下，对第0代的垃圾回收会回收到大量的内存。事实上，第0代的所有对象都可能被回收。\n\n\n\n如果垃圾回收器发现在回收第0代后存活下来的对象很少，就可能减少第0代的预算。已分配空间的减少意味着垃圾回收将更频繁地发生，但垃圾回收器每次做的事情也减少，这减少了进程的工作集。\n\n\n\n另一方面，如果垃圾回收器回收了第0代，发现还有很多对象存活，没多少内存可以被回收，就会增大第0代的预算。\n\n同样的启发性算法调整预算适用于了第1代和第2代的预算。\n\n引自：《CLR VIA C# -21章》\n\n\n[自动内存管理](https://msdn.microsoft.com/zh-cn/library/vstudio/f144e03t(v=vs.100).aspx)\n\n\n[垃圾回收的基础](https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100).aspx)\n\n\n[代数](https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100).aspx#generations )","slug":"托管堆和垃圾回收","published":1,"date":"2016-02-23T15:59:40.045Z","updated":"2016-02-23T15:25:15.626Z","comments":1,"photos":[],"link":"","_id":"cikzlm3je00073gungpwwsycx"},{"layout":"post","title":"C#.NET托管堆和垃圾回收(续)","_content":"\n\n##大对象\n CLR将对象分成大对象和小对象。目前认为85000字节或者更大的对象是大对象。CLR以不同方式对待大小对象。\n \n1. 大对象不是在小对象的地址空间分配的，而是在进程地址空间的其他地方分配。\n\n2. 目前版本的GC不“压缩”大对象，因为在内存中移动它们代价过高。但这可能在进程中的大对象之间造成地址空间碎片化，以至于抛出OutMemoryException。CLR将来的版本可能会压缩大对象。\n3. 大对象总是第2代，绝不可能是第0代或者第1代。所以只能为需要长时间存活的资源创建大对象。分配短时间存活的大对象会导致第2代被更频繁地回收，损失性能。大对象一般是大字符串（XML/JSON）或者用于I/O操作的字节数组（从文件/网络将字节读入缓冲区以便处理）。\n\n\n\n##垃圾回收模式 \n CLR启动时会选择一个GC模式，进程中之前该模式都不会改变。\n \n 有两个基本GC模式。\n\n###工作站 \n该模式针对客户端应用程序优化GC。GC造成的延时很低，应用程序线程挂起时间很短，避免用户感到焦虑。在该模式中,GC假定机器上运行的其他应用程序都不会消耗太多的CPU资源。\n\n###服务器 \n 该模式针对服务器端应用程序优化GC。被优化的主要是吞吐量和资源利用。GC假定机器上没有运行其他应用程序（无论客户端还是服务器应用程序），并假定机器的所有CPU都可以用来辅助完成GC。该模式造成托管堆被拆分成几个区域，每个CPU一个。开始垃圾回收时，垃圾回收器在每个CPU上运行一个特殊线程；每个线程都和其他线程并发回收它自己的区域。对于工作者线程行为一致的服务器应用程序，并发回收能很好进行。这个功能要求应用程序在多CPU计算机上运行，是线程能真正同时工作，从而得到性能上的提升。\n\n\n\n应用程序默认以“工作站”GC模式运行。寄宿了CLR的服务器应用程序（如ASP.NET ）可请求CLR加载服务器 GC.但如果应用程序在单处理器计算机上运行，CLR总是使用“工作站”GC模式。\n\n独立应用程序可以创建一个配置文件告诉CLR 使用CLR使用服务器回收器。配置文件要为应用程序添加gcServer元素。下面是一个示例配置文件：\n<configuration>\n       <runtime>\n             <gcServer enabled=\"true\">\n      </runtime>\n</configuration> \n可以使用GCSettings类的只读Boolean属性IsServerGC得到CLR是否处于“服务器”GC模式。\n\n\n\n除了这两种模式，GC还支持两种子模式：并发(默认)或者非并发。\n在并发方式中，垃圾回收器有一个额外的后台线程，它能在应用程序运行时并发标记对象。 程序运行时，垃圾回收器运行一个普通优先级的后台线程来查找不可达对象。找到之后，垃圾回收器再次挂起所以线程，判断是否要“压缩”内存。如决定压缩，内存会被压缩，根引用会被修正，应用程序线程恢复运行。这一次垃圾回收花费的时间比平常少，因为不可达对象集合已构造好了。但垃圾回收器也可能决定不压缩内存；事实上，垃圾回收器更倾向不压缩。可用内存多，垃圾回收器便不会压缩堆；这有利于增强性能，但会增大程序的工作集。使用并发垃圾回收器，应用程序消耗的内存通常比使用非并发垃圾回收器多。","source":"_posts/托管堆和垃圾回收(续).md","raw":"---\nlayout: post\ntitle: C#.NET托管堆和垃圾回收(续)\ncategory: GC\n---\n\n\n##大对象\n CLR将对象分成大对象和小对象。目前认为85000字节或者更大的对象是大对象。CLR以不同方式对待大小对象。\n \n1. 大对象不是在小对象的地址空间分配的，而是在进程地址空间的其他地方分配。\n\n2. 目前版本的GC不“压缩”大对象，因为在内存中移动它们代价过高。但这可能在进程中的大对象之间造成地址空间碎片化，以至于抛出OutMemoryException。CLR将来的版本可能会压缩大对象。\n3. 大对象总是第2代，绝不可能是第0代或者第1代。所以只能为需要长时间存活的资源创建大对象。分配短时间存活的大对象会导致第2代被更频繁地回收，损失性能。大对象一般是大字符串（XML/JSON）或者用于I/O操作的字节数组（从文件/网络将字节读入缓冲区以便处理）。\n\n\n\n##垃圾回收模式 \n CLR启动时会选择一个GC模式，进程中之前该模式都不会改变。\n \n 有两个基本GC模式。\n\n###工作站 \n该模式针对客户端应用程序优化GC。GC造成的延时很低，应用程序线程挂起时间很短，避免用户感到焦虑。在该模式中,GC假定机器上运行的其他应用程序都不会消耗太多的CPU资源。\n\n###服务器 \n 该模式针对服务器端应用程序优化GC。被优化的主要是吞吐量和资源利用。GC假定机器上没有运行其他应用程序（无论客户端还是服务器应用程序），并假定机器的所有CPU都可以用来辅助完成GC。该模式造成托管堆被拆分成几个区域，每个CPU一个。开始垃圾回收时，垃圾回收器在每个CPU上运行一个特殊线程；每个线程都和其他线程并发回收它自己的区域。对于工作者线程行为一致的服务器应用程序，并发回收能很好进行。这个功能要求应用程序在多CPU计算机上运行，是线程能真正同时工作，从而得到性能上的提升。\n\n\n\n应用程序默认以“工作站”GC模式运行。寄宿了CLR的服务器应用程序（如ASP.NET ）可请求CLR加载服务器 GC.但如果应用程序在单处理器计算机上运行，CLR总是使用“工作站”GC模式。\n\n独立应用程序可以创建一个配置文件告诉CLR 使用CLR使用服务器回收器。配置文件要为应用程序添加gcServer元素。下面是一个示例配置文件：\n<configuration>\n       <runtime>\n             <gcServer enabled=\"true\">\n      </runtime>\n</configuration> \n可以使用GCSettings类的只读Boolean属性IsServerGC得到CLR是否处于“服务器”GC模式。\n\n\n\n除了这两种模式，GC还支持两种子模式：并发(默认)或者非并发。\n在并发方式中，垃圾回收器有一个额外的后台线程，它能在应用程序运行时并发标记对象。 程序运行时，垃圾回收器运行一个普通优先级的后台线程来查找不可达对象。找到之后，垃圾回收器再次挂起所以线程，判断是否要“压缩”内存。如决定压缩，内存会被压缩，根引用会被修正，应用程序线程恢复运行。这一次垃圾回收花费的时间比平常少，因为不可达对象集合已构造好了。但垃圾回收器也可能决定不压缩内存；事实上，垃圾回收器更倾向不压缩。可用内存多，垃圾回收器便不会压缩堆；这有利于增强性能，但会增大程序的工作集。使用并发垃圾回收器，应用程序消耗的内存通常比使用非并发垃圾回收器多。","slug":"托管堆和垃圾回收(续)","published":1,"date":"2016-02-23T15:59:43.819Z","updated":"2016-02-23T15:29:23.104Z","comments":1,"photos":[],"link":"","_id":"cikzlm3jk000a3gunazd08984"},{"layout":"post","title":"C#LINQ 优点 总结(转载)","_content":"\n\n原文链接：http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\n\n这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。\n\n由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。\n\n（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）\n\nLINQ的优点：\n\nLINQ基本有以下七个优点，让我来一一举例说明：\n\n#####1.Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\n\n(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：\n\n语句高亮显示，类型检查，允许使用debugger调试\n\n(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。\n\n(3):集成后的语法更加的清晰易懂，可读性较高。\n\n  \n```\n比较： \n//原来的格式\nSqlConnection sqlConn = new SqlConnection(connectionString);>\nsqlConn.Open();\nSqlCommand command = new SqlCommand();\ncommand.Connection = sqlConn;\ncommand.CommandText = \"Select * From Customer\";\nSqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);\n \n//LINQ的格式\nNORTHWNDDataContext dc = new NORTHWNDDataContext();\nvar query = from c in dc.Customers\n            select c;\n```\n\n\n\n#####2.Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。\n\n使用统一化查询语言的好处在于以下几点：\n\n你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。\n由于使用了统一的语法，可以使代码维护变的更加简单。\n以下代码体现了LINQ的统一化：\n```\n//数据源:对象集合\nvar query = from c in GetCustomers()\n            select c;\n \n//数据源:SQL\nvar query1 = from c in dc.Customers\n             select c;\n//数据源:XML\nvar query2 = from c in customers.Descendants(\"Customer\")\n             select c;\n```\n\n         \n#####3.Extensible：所谓Extensible(可扩展)指以下2个方面:\n\n(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。\n\n(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。\n\n以下是些第三方的LINQ provider：\n\nLINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google\n\n \n\n#####4.Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\n\nDeclarative programming(声明式编程)的优点体现在以下2点：\n\n(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。\n\n(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。\n\n举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。\n\n比较Declarative programming 与 Imperative programming：\n```\n//声明式编程\nList<List<int>> lists = new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5 } };\nvar query = from list in lists\n            from num in list\n            where num % 3 == 0\n            orderby num descending\n            select num;\n \n//命令式编程\nList<int> list1 = new List<int>();\nlist1.Add(1);\nlist1.Add(2);\nlist1.Add(3);\nList<int> list2 = new List<int>();\nlist2.Add(4);\nlist2.Add(5);\nList<List<int>> lists1 = new List<List<int>>();\nlists1.Add(list1);\nlists1.Add(list2);\n \nList<int> newList = new List<int>();\nforeach (var item in lists1)\n      foreach (var num in item)\n        if (num % 3 == 0)\n            newList.Add(num);\nnewList.Reverse();\n\n```\n\n#####5.Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。\n\nSQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是\n\nrectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。\n\n这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。\n\n \n\n#####6.Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。\n\nLINQ返回的结果都是基于接口：IEnumerable<T>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。\n\n优点在于：\n\n(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。\n\n(2).便于代码维护。把代码拆分后能使代码变的更易理解。\n\n以下代码体现了可组成性：\n```\n//以下代码体现了Composable\nList<List<int>> lists = new List<List<int>> { new List<int>\n { 1, 2, 3 }, new List<int> { 4, 5 } };\n \nvar query1 = from list in lists\n             from num in list\n             select num;\n \nvar query2 = from num in query1\n             where num % 3 == 0\n             select num;\n \nvar query3 = from num in query2\n             orderby num descending\n             select num;\n```\n\n \n\n######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。\n\n方便用户做数据移植。\n\n以下代码体现了转换的特性：\n```\n//把关系型数据转换成XML型\n\tvar query = new XElement(\"Orders\",\n            from c in dc.Customers\n            where c.City == \"Paris\"\n            select new XElement(\"Order\",\n                new XAttribute(\"Address\", c.Address)));\n```\n\n以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。\n\n//2011/1/28 补充(LINQ TO SQL)\n\n在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。\n\n\nhttp://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html ","source":"_posts/LINQ优点总结(转载).md","raw":"---\nlayout: post\ntitle: C#LINQ 优点 总结(转载)\ncategory: .net\n---\n\n\n原文链接：http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\n\n这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。\n\n由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。\n\n（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）\n\nLINQ的优点：\n\nLINQ基本有以下七个优点，让我来一一举例说明：\n\n#####1.Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\n\n(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：\n\n语句高亮显示，类型检查，允许使用debugger调试\n\n(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。\n\n(3):集成后的语法更加的清晰易懂，可读性较高。\n\n  \n```\n比较： \n//原来的格式\nSqlConnection sqlConn = new SqlConnection(connectionString);>\nsqlConn.Open();\nSqlCommand command = new SqlCommand();\ncommand.Connection = sqlConn;\ncommand.CommandText = \"Select * From Customer\";\nSqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);\n \n//LINQ的格式\nNORTHWNDDataContext dc = new NORTHWNDDataContext();\nvar query = from c in dc.Customers\n            select c;\n```\n\n\n\n#####2.Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。\n\n使用统一化查询语言的好处在于以下几点：\n\n你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。\n由于使用了统一的语法，可以使代码维护变的更加简单。\n以下代码体现了LINQ的统一化：\n```\n//数据源:对象集合\nvar query = from c in GetCustomers()\n            select c;\n \n//数据源:SQL\nvar query1 = from c in dc.Customers\n             select c;\n//数据源:XML\nvar query2 = from c in customers.Descendants(\"Customer\")\n             select c;\n```\n\n         \n#####3.Extensible：所谓Extensible(可扩展)指以下2个方面:\n\n(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。\n\n(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。\n\n以下是些第三方的LINQ provider：\n\nLINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google\n\n \n\n#####4.Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\n\nDeclarative programming(声明式编程)的优点体现在以下2点：\n\n(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。\n\n(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。\n\n举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。\n\n比较Declarative programming 与 Imperative programming：\n```\n//声明式编程\nList<List<int>> lists = new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5 } };\nvar query = from list in lists\n            from num in list\n            where num % 3 == 0\n            orderby num descending\n            select num;\n \n//命令式编程\nList<int> list1 = new List<int>();\nlist1.Add(1);\nlist1.Add(2);\nlist1.Add(3);\nList<int> list2 = new List<int>();\nlist2.Add(4);\nlist2.Add(5);\nList<List<int>> lists1 = new List<List<int>>();\nlists1.Add(list1);\nlists1.Add(list2);\n \nList<int> newList = new List<int>();\nforeach (var item in lists1)\n      foreach (var num in item)\n        if (num % 3 == 0)\n            newList.Add(num);\nnewList.Reverse();\n\n```\n\n#####5.Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。\n\nSQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是\n\nrectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。\n\n这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。\n\n \n\n#####6.Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。\n\nLINQ返回的结果都是基于接口：IEnumerable<T>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。\n\n优点在于：\n\n(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。\n\n(2).便于代码维护。把代码拆分后能使代码变的更易理解。\n\n以下代码体现了可组成性：\n```\n//以下代码体现了Composable\nList<List<int>> lists = new List<List<int>> { new List<int>\n { 1, 2, 3 }, new List<int> { 4, 5 } };\n \nvar query1 = from list in lists\n             from num in list\n             select num;\n \nvar query2 = from num in query1\n             where num % 3 == 0\n             select num;\n \nvar query3 = from num in query2\n             orderby num descending\n             select num;\n```\n\n \n\n######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。\n\n方便用户做数据移植。\n\n以下代码体现了转换的特性：\n```\n//把关系型数据转换成XML型\n\tvar query = new XElement(\"Orders\",\n            from c in dc.Customers\n            where c.City == \"Paris\"\n            select new XElement(\"Order\",\n                new XAttribute(\"Address\", c.Address)));\n```\n\n以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。\n\n//2011/1/28 补充(LINQ TO SQL)\n\n在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。\n\n\nhttp://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html ","slug":"LINQ优点总结(转载)","published":1,"date":"2016-02-23T15:59:34.760Z","updated":"2016-02-23T15:58:15.555Z","comments":1,"photos":[],"link":"","_id":"cikzlm3jn000c3guno1ak5hi8"}],"PostAsset":[],"PostCategory":[{"post_id":"cikzlm3i500003gunxv8v0x98","category_id":"cikzlm3ig00013gunq8hljn4o","_id":"cikzlm3il00023gunsp7n4toy"},{"post_id":"cikzlm3j200033gunk9hliizh","category_id":"cikzlm3ig00013gunq8hljn4o","_id":"cikzlm3j600043gun9kys9it9"},{"post_id":"cikzlm3ja00053gun7i8dj629","category_id":"cikzlm3ig00013gunq8hljn4o","_id":"cikzlm3jc00063gun88tcd16z"},{"post_id":"cikzlm3je00073gungpwwsycx","category_id":"cikzlm3jg00083gun7qz0a5r1","_id":"cikzlm3jh00093gunbufkeilc"},{"post_id":"cikzlm3jk000a3gunazd08984","category_id":"cikzlm3jg00083gun7qz0a5r1","_id":"cikzlm3jl000b3gun2rolnb92"},{"post_id":"cikzlm3jn000c3guno1ak5hi8","category_id":"cikzlm3ig00013gunq8hljn4o","_id":"cikzlm3jq000d3gunrlun9pus"}],"PostTag":[],"Tag":[]}}