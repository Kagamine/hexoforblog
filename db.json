{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1456236106018},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1456236106019},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1456236106047},{"_id":"themes/landscape/_config.yml","shasum":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1456236106047},{"_id":"themes/landscape/languages/default.yml","shasum":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1456236106092},{"_id":"themes/landscape/languages/nl.yml","shasum":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1456236106091},{"_id":"themes/landscape/languages/no.yml","shasum":"965a171e70347215ec726952e63f5b47930931ef","modified":1456236106093},{"_id":"themes/landscape/languages/ru.yml","shasum":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1456236106093},{"_id":"themes/landscape/languages/zh-CN.yml","shasum":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1456236106092},{"_id":"themes/landscape/languages/zh-TW.yml","shasum":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1456236106104},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1456236106197},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1456236106188},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"931aaaffa0910a48199388ede576184ff15793ee","modified":1456236106215},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1456236106189},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1456236106190},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1456236106189},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1456236106190},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1456236106198},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1456236106190},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1456236106303},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1456236106303},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1456236106304},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"16a904de7bceccbb36b4267565f2215704db2880","modified":1456236106303},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1456236106304},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1456236106304},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1456236106195},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1456236106209},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1456236106195},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1456236106195},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1456236106198},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1456236106198},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1456236106097},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1456236106104},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1456236106104},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1456236106104},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1456236106104},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1456236106104},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1456236106112},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1456236106051},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1456236106115},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1456236106209},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1456236106311},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1456236106305},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1456236106305},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1456236106309},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1456236106306},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1456236106311},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1456236106310},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1456236106309},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1456236106312},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1456236106310},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1456236106312},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1456236106320},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1456236106214},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1456236106324},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1456236106345},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1456236106321},{"_id":"themes/landscape/source/css/style.styl","shasum":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1456236106214},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1456236106214},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1456236106216},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1456236106215},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1456236106216},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1456236106218},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1456236106216},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1456236106318},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1456236106313},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1456236106316},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1456236106315},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1456236106317},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1456236106319},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1456236106218},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1456236106298},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1456236106311},{"_id":"themes/landscape/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1456236106204},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1456236106331},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1456236106336},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1456236106330},{"_id":"source/_posts/NET-Join.md","shasum":"7ec87e56ff468b55ed604e918bbc6630fbce27b2","modified":1456236944428},{"_id":"public/js/script.js","modified":1456237568111,"shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1456237568190,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1456237568205,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1456237568205,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1456237568221,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1456237568221,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1456237568221,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1456237568236,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1456237568236,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1456237568252,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1456237568252,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1456237568267,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1456237568267,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1456237568283,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1456237568283,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1456237568299,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1456237569252,"shasum":"1945f6e480b96a008a1d24ef1a928b1d984b0cdb"},{"_id":"public/css/images/banner.jpg","modified":1456237569549,"shasum":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1456237569549,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1456237569565,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1456237569565,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1456237569580,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1456237569580,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/2016/02/23/LINQ 优点 总结(转载)/index.html","modified":1456237569674,"shasum":"2192508bb4b031e2d61bee1ecb72b0ddcef92182"},{"_id":"public/2016/02/23/NET-Join/index.html","modified":1456237621267,"shasum":"d5e4b7e4a4a2018239830a15b9780e11830259e1"},{"_id":"public/archives/index.html","modified":1456237621282,"shasum":"e1a23b737d636e807a09219bf70843fe6e99803b"},{"_id":"public/archives/2016/index.html","modified":1456237621298,"shasum":"fcf34804dfee6ba39a420c7b98bdfddbdf270344"},{"_id":"public/archives/2016/02/index.html","modified":1456237621313,"shasum":"67dfbe68b7b7b3ce1f898f6f676a37ce37b3fae5"},{"_id":"public/categories/net/index.html","modified":1456237621329,"shasum":"58655b0d7598d0b5c1c5a6d639fa757e821bc8b1"},{"_id":"public/atom.xml","modified":1456237621360,"shasum":"12e0ea6f7d6f4be78fe9516483b3fdade6c864b1"},{"_id":"public/index.html","modified":1456237621360,"shasum":"3583996d3d24a3cd2bb1ec953bf2d36f0a0a2e07"},{"_id":"public/sitemap.xml","modified":1456237621313,"shasum":"83b23cf338de50dfea72dcb6234de504b3398179"},{"_id":"source/_posts/LINQ优点总结(转载).md","shasum":"488964cda9597101e2f39208e51a35433905305d","modified":1456237019733},{"_id":"public/2016/02/23/LINQ优点总结(转载)/index.html","modified":1456237621235,"shasum":"868c0cbfa477450568fec66fcc41c8919120038b"}],"Category":[{"name":"another","_id":"cikzht8pz0001xgundvgwp3pc"},{"name":".net","_id":"cikzi7k3n0000f4unmt6rader"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":".NET join用法","_content":"\n\n#.NET   Join\n 连接：内连接、外连接、左连接、右连接。\nSQL的Join这里就不多说了，\n今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。\n\nJoin用于连接数据，首先就是数据之间有联系咯。\n \n先说Enumerable.Join()。\n参数类型如下：\n\t\t\tpublic static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>\n\t\t\t(      \n\t\t\t         this IEnumerable<TOuter> outer,\n\t\t\t        IEnumerable<TInner> inner,\n\t\t\t        Func<TOuter, TKey> outerKeySelector,\n\t\t\t        Func<TInner, TKey> innerKeySelector,\n\t\t\t        Func<TOuter, TInner, TResult> resultSelector\n\t\t\t) \n类型参数\nTOuter\n第一个序列中的元素的类型。\nTInner\n第二个序列中的元素的类型。\nTKey\n键选择器函数返回的键的类型。\nTResult\n结果元素的类型。\n参数\nouter\n类型：System.Collections.Generic.IEnumerable<TOuter>\n要联接的第一个序列。\ninner\n类型：System.Collections.Generic.IEnumerable<TInner>\n要与第一个序列联接的序列。\nouterKeySelector\n类型：System.Func<TOuter, TKey>\n用于从第一个序列的每个元素提取联接键的函数。\ninnerKeySelector\n类型：System.Func<TInner, TKey>\n用于从第二个序列的每个元素提取联接键的函数。\nresultSelector\n类型：System.Func<TOuter, TInner, TResult>\n用于从两个匹配元素创建结果元素的函数。\n返回值\n类型：System.Collections.Generic.IEnumerable<TResult>\nIEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.\" xml:space=\"preserve\">一个具有 TResult 类型元素的 IEnumerable<T>，这些元素是通过对两个序列执行内部联接得来的。\n使用说明\n在 Visual Basic 和 C# 中，可以在 IEnumerable<TOuter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。\n \n先上一个MSDN的例子。\n       \n         public static void JoinEx1()         \n         {\n\t       Person magnus = new Person { Name = \"Hedlund, Magnus\" };\n\t       Pet barley = new Pet { Name = \"Barley\", Owner = terry };\n\t       Person terry = new Person { Name = \"Adams, Terry\" };\n\t       Person charlotte = new Person { Name = \"Weiss, \n\t       Charlotte\" };\n\t       Pet boots = new Pet { Name = \"Boots\", Owner = terry };\n\t       Pet whiskers = new Pet { Name = \"Whiskers\", \n\t       Owner = charlotte};\n\t       Pet daisy = new Pet { Name = \"Daisy\", Owner = magnus };\n\n        List<Person> people = new List<Person> \n        { magnus, terry, charlotte };\n        List<Pet> pets = new List<Pet> \n        { barley, boots, whiskers, daisy };\n\n        // Create a list of Person-Pet pairs where \n        // each element is an anonymous type that contains a\n        // Pet's name and the name of the Person that owns the Pet.\n        var query =\n            people.Join(\n                        pets,//需要Join的另一个数据源\n              person => person,//自己用来比较的key， lambda 表达式\n         pet => pet.Owner,//另一个数据源用来比较的key， lambda 表达式\n    (person, pet) =>new { OwnerName = person.Name, Pet = pet.Name } \n                   //想要取出来的数据，支持匿名对象， lambda 表达式);\n        foreach (var obj in query)\n        {\n          Console.WriteLine( \"{0} - {1}\",obj.OwnerName,obj.Pet);\n        }\n    }\n\n LINQ的Join\n同样是上面的数据，如果换成LINQ的Join，写法如下：\n            var query = from person in people // 第一个数据源\n                      join pet in pets            //第二个数据源\n                      on person equals pet.Owner  //Join条件\n                      select  new { OwnerName = person.Name, Pet = pet.Name };  \n                      //要到得到的数据。\n\n\n上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接....\n等我下次有心情再更新吧，再不走家里的键盘又要坏了。 \n\n一些资料链接：\nhttps://msdn.microsoft.com/zh-cn/library/bb311040.aspx\nhttps://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396\nhttp://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html\nhttp://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html\nhttp://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html ; \n\n\nLINQ GroupJoin 实现左连接\nvar queryGroup = from person in people // 第一个数据源\n                                join pet in pets //第二个数据源\n                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin\n                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 ","source":"_posts/NET-Join.md","raw":"---\nlayout: post\ntitle: .NET join用法\ncategory: .net\n---\n\n\n#.NET   Join\n 连接：内连接、外连接、左连接、右连接。\nSQL的Join这里就不多说了，\n今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。\n\nJoin用于连接数据，首先就是数据之间有联系咯。\n \n先说Enumerable.Join()。\n参数类型如下：\n\t\t\tpublic static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>\n\t\t\t(      \n\t\t\t         this IEnumerable<TOuter> outer,\n\t\t\t        IEnumerable<TInner> inner,\n\t\t\t        Func<TOuter, TKey> outerKeySelector,\n\t\t\t        Func<TInner, TKey> innerKeySelector,\n\t\t\t        Func<TOuter, TInner, TResult> resultSelector\n\t\t\t) \n类型参数\nTOuter\n第一个序列中的元素的类型。\nTInner\n第二个序列中的元素的类型。\nTKey\n键选择器函数返回的键的类型。\nTResult\n结果元素的类型。\n参数\nouter\n类型：System.Collections.Generic.IEnumerable<TOuter>\n要联接的第一个序列。\ninner\n类型：System.Collections.Generic.IEnumerable<TInner>\n要与第一个序列联接的序列。\nouterKeySelector\n类型：System.Func<TOuter, TKey>\n用于从第一个序列的每个元素提取联接键的函数。\ninnerKeySelector\n类型：System.Func<TInner, TKey>\n用于从第二个序列的每个元素提取联接键的函数。\nresultSelector\n类型：System.Func<TOuter, TInner, TResult>\n用于从两个匹配元素创建结果元素的函数。\n返回值\n类型：System.Collections.Generic.IEnumerable<TResult>\nIEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.\" xml:space=\"preserve\">一个具有 TResult 类型元素的 IEnumerable<T>，这些元素是通过对两个序列执行内部联接得来的。\n使用说明\n在 Visual Basic 和 C# 中，可以在 IEnumerable<TOuter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。\n \n先上一个MSDN的例子。\n       \n         public static void JoinEx1()         \n         {\n\t       Person magnus = new Person { Name = \"Hedlund, Magnus\" };\n\t       Pet barley = new Pet { Name = \"Barley\", Owner = terry };\n\t       Person terry = new Person { Name = \"Adams, Terry\" };\n\t       Person charlotte = new Person { Name = \"Weiss, \n\t       Charlotte\" };\n\t       Pet boots = new Pet { Name = \"Boots\", Owner = terry };\n\t       Pet whiskers = new Pet { Name = \"Whiskers\", \n\t       Owner = charlotte};\n\t       Pet daisy = new Pet { Name = \"Daisy\", Owner = magnus };\n\n        List<Person> people = new List<Person> \n        { magnus, terry, charlotte };\n        List<Pet> pets = new List<Pet> \n        { barley, boots, whiskers, daisy };\n\n        // Create a list of Person-Pet pairs where \n        // each element is an anonymous type that contains a\n        // Pet's name and the name of the Person that owns the Pet.\n        var query =\n            people.Join(\n                        pets,//需要Join的另一个数据源\n              person => person,//自己用来比较的key， lambda 表达式\n         pet => pet.Owner,//另一个数据源用来比较的key， lambda 表达式\n    (person, pet) =>new { OwnerName = person.Name, Pet = pet.Name } \n                   //想要取出来的数据，支持匿名对象， lambda 表达式);\n        foreach (var obj in query)\n        {\n          Console.WriteLine( \"{0} - {1}\",obj.OwnerName,obj.Pet);\n        }\n    }\n\n LINQ的Join\n同样是上面的数据，如果换成LINQ的Join，写法如下：\n            var query = from person in people // 第一个数据源\n                      join pet in pets            //第二个数据源\n                      on person equals pet.Owner  //Join条件\n                      select  new { OwnerName = person.Name, Pet = pet.Name };  \n                      //要到得到的数据。\n\n\n上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接....\n等我下次有心情再更新吧，再不走家里的键盘又要坏了。 \n\n一些资料链接：\nhttps://msdn.microsoft.com/zh-cn/library/bb311040.aspx\nhttps://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396\nhttp://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html\nhttp://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html\nhttp://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html ; \n\n\nLINQ GroupJoin 实现左连接\nvar queryGroup = from person in people // 第一个数据源\n                                join pet in pets //第二个数据源\n                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin\n                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 ","slug":"NET-Join","published":1,"date":"2016-02-23T14:15:44.428Z","updated":"2016-02-23T14:15:44.428Z","_id":"cikzht8r80003xgun0zscrk3d","comments":1,"photos":[],"link":""},{"layout":"post","title":".net LINQ","_content":"\n##LINQ 优点 总结(转载)\n原文链接：http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\n\n这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。\n\n由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。\n\n（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）\n\nLINQ的优点：\n\nLINQ基本有以下七个优点，让我来一一举例说明：\n\n#####1.Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\n\n(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：\n\n语句高亮显示，类型检查，允许使用debugger调试\n\n(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。\n\n(3):集成后的语法更加的清晰易懂，可读性较高。\n\n  \n```\n比较： \n//原来的格式\nSqlConnection sqlConn = new SqlConnection(connectionString);>\nsqlConn.Open();\nSqlCommand command = new SqlCommand();\ncommand.Connection = sqlConn;\ncommand.CommandText = \"Select * From Customer\";\nSqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);\n \n//LINQ的格式\nNORTHWNDDataContext dc = new NORTHWNDDataContext();\nvar query = from c in dc.Customers\n            select c;\n```\n\n\n\n#####2.Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。\n\n使用统一化查询语言的好处在于以下几点：\n\n你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。\n由于使用了统一的语法，可以使代码维护变的更加简单。\n以下代码体现了LINQ的统一化：\n```\n//数据源:对象集合\nvar query = from c in GetCustomers()\n            select c;\n \n//数据源:SQL\nvar query1 = from c in dc.Customers\n             select c;\n//数据源:XML\nvar query2 = from c in customers.Descendants(\"Customer\")\n             select c;\n```\n\n         \n#####3.Extensible：所谓Extensible(可扩展)指以下2个方面:\n\n(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。\n\n(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。\n\n以下是些第三方的LINQ provider：\n\nLINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google\n\n \n\n#####4.Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\n\nDeclarative programming(声明式编程)的优点体现在以下2点：\n\n(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。\n\n(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。\n\n举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。\n\n比较Declarative programming 与 Imperative programming：\n```\n//声明式编程\nList<List<int>> lists = new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5 } };\nvar query = from list in lists\n            from num in list\n            where num % 3 == 0\n            orderby num descending\n            select num;\n \n//命令式编程\nList<int> list1 = new List<int>();\nlist1.Add(1);\nlist1.Add(2);\nlist1.Add(3);\nList<int> list2 = new List<int>();\nlist2.Add(4);\nlist2.Add(5);\nList<List<int>> lists1 = new List<List<int>>();\nlists1.Add(list1);\nlists1.Add(list2);\n \nList<int> newList = new List<int>();\nforeach (var item in lists1)\n      foreach (var num in item)\n        if (num % 3 == 0)\n            newList.Add(num);\nnewList.Reverse();\n\n```\n\n#####5.Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。\n\nSQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是\n\nrectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。\n\n这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。\n\n \n\n#####6.Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。\n\nLINQ返回的结果都是基于接口：IEnumerable<T>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。\n\n优点在于：\n\n(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。\n\n(2).便于代码维护。把代码拆分后能使代码变的更易理解。\n\n以下代码体现了可组成性：\n```\n//以下代码体现了Composable\nList<List<int>> lists = new List<List<int>> { new List<int>\n { 1, 2, 3 }, new List<int> { 4, 5 } };\n \nvar query1 = from list in lists\n             from num in list\n             select num;\n \nvar query2 = from num in query1\n             where num % 3 == 0\n             select num;\n \nvar query3 = from num in query2\n             orderby num descending\n             select num;\n```\n\n \n\n######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。\n\n方便用户做数据移植。\n\n以下代码体现了转换的特性：\n```\n//把关系型数据转换成XML型\n\tvar query = new XElement(\"Orders\",\n            from c in dc.Customers\n            where c.City == \"Paris\"\n            select new XElement(\"Order\",\n                new XAttribute(\"Address\", c.Address)));\n```\n\n以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。\n\n//2011/1/28 补充(LINQ TO SQL)\n\n在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。\n\n\nhttp://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html ","source":"_posts/LINQ优点总结(转载).md","raw":"---\nlayout: post\ntitle: .net LINQ\ncategory: .net\n---\n\n##LINQ 优点 总结(转载)\n原文链接：http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\n\n这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。\n\n由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。\n\n（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）\n\nLINQ的优点：\n\nLINQ基本有以下七个优点，让我来一一举例说明：\n\n#####1.Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\n\n(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：\n\n语句高亮显示，类型检查，允许使用debugger调试\n\n(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。\n\n(3):集成后的语法更加的清晰易懂，可读性较高。\n\n  \n```\n比较： \n//原来的格式\nSqlConnection sqlConn = new SqlConnection(connectionString);>\nsqlConn.Open();\nSqlCommand command = new SqlCommand();\ncommand.Connection = sqlConn;\ncommand.CommandText = \"Select * From Customer\";\nSqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);\n \n//LINQ的格式\nNORTHWNDDataContext dc = new NORTHWNDDataContext();\nvar query = from c in dc.Customers\n            select c;\n```\n\n\n\n#####2.Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。\n\n使用统一化查询语言的好处在于以下几点：\n\n你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。\n由于使用了统一的语法，可以使代码维护变的更加简单。\n以下代码体现了LINQ的统一化：\n```\n//数据源:对象集合\nvar query = from c in GetCustomers()\n            select c;\n \n//数据源:SQL\nvar query1 = from c in dc.Customers\n             select c;\n//数据源:XML\nvar query2 = from c in customers.Descendants(\"Customer\")\n             select c;\n```\n\n         \n#####3.Extensible：所谓Extensible(可扩展)指以下2个方面:\n\n(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。\n\n(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。\n\n以下是些第三方的LINQ provider：\n\nLINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google\n\n \n\n#####4.Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\n\nDeclarative programming(声明式编程)的优点体现在以下2点：\n\n(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。\n\n(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。\n\n举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。\n\n比较Declarative programming 与 Imperative programming：\n```\n//声明式编程\nList<List<int>> lists = new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5 } };\nvar query = from list in lists\n            from num in list\n            where num % 3 == 0\n            orderby num descending\n            select num;\n \n//命令式编程\nList<int> list1 = new List<int>();\nlist1.Add(1);\nlist1.Add(2);\nlist1.Add(3);\nList<int> list2 = new List<int>();\nlist2.Add(4);\nlist2.Add(5);\nList<List<int>> lists1 = new List<List<int>>();\nlists1.Add(list1);\nlists1.Add(list2);\n \nList<int> newList = new List<int>();\nforeach (var item in lists1)\n      foreach (var num in item)\n        if (num % 3 == 0)\n            newList.Add(num);\nnewList.Reverse();\n\n```\n\n#####5.Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。\n\nSQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是\n\nrectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。\n\n这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。\n\n \n\n#####6.Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。\n\nLINQ返回的结果都是基于接口：IEnumerable<T>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。\n\n优点在于：\n\n(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。\n\n(2).便于代码维护。把代码拆分后能使代码变的更易理解。\n\n以下代码体现了可组成性：\n```\n//以下代码体现了Composable\nList<List<int>> lists = new List<List<int>> { new List<int>\n { 1, 2, 3 }, new List<int> { 4, 5 } };\n \nvar query1 = from list in lists\n             from num in list\n             select num;\n \nvar query2 = from num in query1\n             where num % 3 == 0\n             select num;\n \nvar query3 = from num in query2\n             orderby num descending\n             select num;\n```\n\n \n\n######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。\n\n方便用户做数据移植。\n\n以下代码体现了转换的特性：\n```\n//把关系型数据转换成XML型\n\tvar query = new XElement(\"Orders\",\n            from c in dc.Customers\n            where c.City == \"Paris\"\n            select new XElement(\"Order\",\n                new XAttribute(\"Address\", c.Address)));\n```\n\n以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。\n\n//2011/1/28 补充(LINQ TO SQL)\n\n在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。\n\n\nhttp://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html ","slug":"LINQ优点总结(转载)","published":1,"date":"2016-02-23T14:26:48.052Z","updated":"2016-02-23T14:16:59.733Z","comments":1,"photos":[],"link":"","_id":"cikzia36w0000kgun31fm92vz"}],"PostAsset":[],"PostCategory":[{"post_id":"cikzht8r80003xgun0zscrk3d","category_id":"cikzi7k3n0000f4unmt6rader","_id":"cikzi7k430002f4unzvho55ej"},{"post_id":"cikzia36w0000kgun31fm92vz","category_id":"cikzi7k3n0000f4unmt6rader","_id":"cikzia37b0001kgunougjkboa"}],"PostTag":[],"Tag":[]}}